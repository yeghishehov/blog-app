{"version":3,"sources":["components/Authorization/Logout/Logout.js","components/Main/getUniqueId.js","components/Authorization/Login/Login.js","components/Authorization/Authorization.js","components/Navigation/Navigation.js","components/Posts/PostEditor.js","components/Posts/Post.js","components/Home/Home.js","components/Posts/CreatePost.js","components/Coments/CreateComent.js","components/Coments/ComentEditor.js","components/Coments/Coment.js","components/Coments/ComentsPost.js","components/Posts/PostPage.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Logout","props","classes","handleMenuOpenChange","useContext","UsersContext","users","setUser","MenuItem","className","dialogItem","to","dialogItemLink","onClick","e","forEach","user","isLogged","localStorage","setItem","JSON","stringify","getUniqueId","checkingObject","reduce","acc","id","Login","React","useState","userName","setUserName","password","setPassword","handleLogin","userIndex","findIndex","name","updateUsers","handleLoginEnter","key","List","ListItem","TextField","label","variant","onChange","target","value","onKeyDown","autoFocus","type","autoComplete","Button","button","color","aria-label","Authorization","openMenu","loggedUser","isUserLoged","username","item","icon","Dialog","onClose","open","PaperProps","dialog","DialogTitle","dialogTitle","useStyles","makeStyles","root","flexGrow","appBar","backgroundColor","fontSize","fontFamily","marginRight","link","textDecoration","textAlign","margin","Navigation","setOpenMenu","AppBar","position","Toolbar","Grid","container","direction","justify","alignItems","event","theme","card","marginTop","paddingLeft","paddingRight","wordWrap","PostEditor","post","handleEditPost","PostsContext","posts","setPost","title","setTitle","content","setContent","fullWidth","multiline","rows","rowsMax","IconButton","date","Date","toLocaleString","updatePosts","map","p","left","marginBottom","Post","setSelectedPost","isEditPost","setIsEditPost","logedUser","accessEdit","authorId","Card","CardHeader","subheader","authorName","CardContent","window","location","href","includes","centered","width","Home","reduceRight","reversePosts","paper","CreatePost","sm","Paper","Typography","align","textField","CreateComents","coments","setComents","coment","setComent","postId","updateComents","ComentEditor","thisComent","handleEditComent","c","cardContent","paddingTop","Coment","isEditComent","setIsEditComent","ComentsPost","comentsPost","filter","reverseComents","PostPage","selectedPost","aria-labelledby","createContext","Main","find","useEffect","usersStorage","parse","getItem","postsStorage","comentsStorage","Provider","exact","path","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ac22cd2.chunk.js","sourcesContent":["import React, { useContext } from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { Link } from 'react-router-dom';\r\nimport {UsersContext} from '../../Main/Main';\r\n\r\nexport default function Logout(props) {\r\n    const {classes, handleMenuOpenChange} = props;\r\n    const {users, setUser} = useContext(UsersContext);\r\n\r\n    const handleLogout = e => {\r\n        users.forEach(user => {\r\n            if(user.isLogged === true) user.isLogged = false;\r\n        });\r\n        localStorage.setItem('usersStorage', JSON.stringify([...users]));\r\n        setUser([...users]);\r\n    }\r\n\r\n    return (\r\n            <div>      \r\n                <MenuItem className={classes.dialogItem} >\r\n                    <Link to=\"/create\" className={classes.dialogItemLink} onClick={handleMenuOpenChange}>\r\n                        create new post\r\n                    </Link>\r\n                </MenuItem>\r\n                <MenuItem className={classes.dialogItem}>\r\n                    <Link to='/blog-app' className={classes.dialogItemLink} onClick={handleLogout}>\r\n                        Log out\r\n                    </Link>\r\n                </MenuItem>          \r\n            </div>\r\n    )\r\n}","const getUniqueId = checkingObject => {\r\n    return checkingObject\r\n            ? checkingObject.reduce((acc, { id }) => {\r\n                return id > acc ? id : acc;\r\n              }, 0)\r\n            : 0;\r\n  };\r\n  \r\n  export default getUniqueId;\r\n  ","import React, { useContext } from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {UsersContext} from '../../Main/Main';\r\nimport getUniqueId from '../../Main/getUniqueId';\r\n\r\n\r\nexport default function Login(props) {\r\n    const {classes} = props;\r\n    const [userName, setUserName] = React.useState('');\r\n    const [password, setPassword] = React.useState('');\r\n\r\n    const {users, setUser} = useContext(UsersContext);\r\n\r\n    const handleLogin = () => {\r\n        if(userName !== '' && password !== ''){\r\n            const userIndex = users.findIndex(user => userName === user.name && password === user.password);\r\n            if(userIndex > -1){                \r\n                users[userIndex].isLogged=true;\r\n                localStorage.setItem('usersStorage', JSON.stringify([...users]));\r\n                setUser([...users])\r\n            } else {\r\n                const id = getUniqueId(users) + 1; \r\n                const updateUsers = [...users, {id, name: userName, password, isLogged: true}];\r\n                localStorage.setItem('usersStorage', JSON.stringify([...updateUsers]));\r\n                setUser([...updateUsers]);                \r\n            }\r\n        }        \r\n    }\r\n    \r\n    const handleLoginEnter = e => {\r\n        if (e.key === 'Enter') {\r\n            handleLogin();\r\n        }        \r\n    }\r\n\r\n    const handleEnteredUserName = e => {\r\n        setUserName( e.target.value )\r\n    }\r\n\r\n    const handleEnteredPassword = e => {\r\n        setPassword( e.target.value )\r\n    }\r\n\r\n\r\n    return(\r\n        <List> \r\n            <ListItem>\r\n                <TextField\r\n                    label=\"Username\"\r\n                    variant=\"outlined\"\r\n                    onChange={handleEnteredUserName}\r\n                    onKeyDown={handleLoginEnter}\r\n                    value={userName}\r\n                    autoFocus\r\n                />\r\n            </ListItem>    \r\n            <ListItem>\r\n                <TextField\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    autoComplete=\"current-password\"\r\n                    variant=\"outlined\"\r\n                    onChange={handleEnteredPassword}\r\n                    onKeyDown={handleLoginEnter}\r\n                    value={password}\r\n                />\r\n            </ListItem>\r\n            <ListItem>\r\n                <Button\r\n                    onClick={handleLogin}\r\n                    className={classes.button}\r\n                    color=\"primary\" \r\n                    aria-label=\"add\"\r\n                >\r\n                    Log in \r\n                </Button>\r\n            </ListItem>\r\n        </List>\r\n    )\r\n}\r\n\r\n","import React, { useContext } from 'react';\r\nimport AccountIcon from '@material-ui/icons/AccountCircle';\r\nimport LogInIcon from '@material-ui/icons/ExitToAppTwoTone';\r\nimport Button from '@material-ui/core/Button';\r\nimport Logout from './Logout/Logout';\r\nimport Login from './Login/Login'\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport {UsersContext} from '../Main/Main'\r\n\r\n\r\nexport default function Authorization(props) {\r\n    const { classes} = props; \r\n    const {openMenu, handleMenuOpenChange} = props;\r\n\r\n    const {isUserLoged} = useContext(UsersContext);\r\n\r\n    const loggedUser = isUserLoged(); \r\n\r\n    const username = loggedUser ? loggedUser.name : null; \r\n\r\n    return (\r\n        <div>\r\n            <Button \r\n                className={classes.item}\r\n                onClick={handleMenuOpenChange}\r\n            >\r\n                {loggedUser\r\n                    ? <> <AccountIcon className={classes.icon} /> <h1 className={classes.item}>{username}</h1> </>\r\n                    : <> <LogInIcon className={classes.icon} />   <h1 className={classes.item}> Log in </h1> </>\r\n                }\r\n            </Button>\r\n\r\n\r\n            <Dialog \r\n                onClose={handleMenuOpenChange} \r\n                open={openMenu}  \r\n                PaperProps={{className: classes.dialog }}\r\n            >\r\n                <DialogTitle className={classes.dialogTitle}>\r\n                    {loggedUser ? username : \"Login to My Stories\"}\r\n                </DialogTitle>\r\n\r\n                {loggedUser\r\n                    ? (     \r\n                        <Logout\r\n                            classes={classes}\r\n                            handleMenuOpenChange={handleMenuOpenChange} \r\n                        /> \r\n                    ) : (\r\n                        <Login\r\n                            classes={classes}\r\n                        />\r\n                    )}\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Authorization from '../Authorization/Authorization'\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  appBar: {\r\n    backgroundColor: '#b39ddb',\r\n  },\r\n  item: {\r\n    color: '#f3e5f5',\r\n    fontSize: '20px',\r\n    fontFamily: 'Sriracha, cursive',    \r\n  },\r\n  icon:{\r\n    marginRight: '5px',\r\n  },\r\n  link: {\r\n    textDecoration: 'none',    \r\n    color: '#616161',\r\n  },\r\n  dialog:{\r\n    backgroundColor: '#b39ddb',\r\n  },\r\n  dialogTitle:{\r\n    color: '#f3e5f5',\r\n    fontSize: '20px',\r\n    textAlign: 'center',\r\n  },\r\n  dialogItem:{\r\n    textAlign: 'center',\r\n    fontSize: '20px',\r\n    color: '#616161',\r\n  },\r\n  dialogItemLink:{\r\n    margin: '0 auto',\r\n    textDecoration: 'none',    \r\n    color: '#616161',\r\n  },\r\n  button: {\r\n      margin: '0 auto'\r\n  }\r\n});\r\n\r\nexport default function Navigation(props) {\r\n  const classes = useStyles();    \r\n  const [openMenu, setOpenMenu] = React.useState(false);\r\n\r\n  const handleMenuOpenChange = event => {\r\n    setOpenMenu(!openMenu)\r\n  }; \r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" className={classes.appBar}>\r\n        <Toolbar>\r\n            <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"space-between\"\r\n                alignItems=\"center\"\r\n            >\r\n\r\n            <Link to=\"/blog-app\" className={classes.link}>\r\n                <Button>              \r\n                     <h1 className={classes.item}>My Stories</h1>\r\n                </Button>\r\n            </Link>\r\n\r\n              \r\n            <div>\r\n                <Authorization \r\n                    classes={classes}\r\n                    openMenu={openMenu} \r\n                    handleMenuOpenChange={handleMenuOpenChange} \r\n                />\r\n\r\n            </div>\r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {PostsContext} from '../Main/Main'\r\n\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport { IconButton } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        marginTop: 10,\r\n        paddingLeft: '10%',\r\n        paddingRight: '10%',\r\n        backgroundColor: '#edeeff',         \r\n        wordWrap: 'break-word',\r\n        textAlign: 'justify',\r\n    },\r\n  }));\r\n\r\nexport default function PostEditor ({post, handleEditPost}) {\r\n    const classes = useStyles();\r\n    const {posts, setPost} = useContext(PostsContext);\r\n\r\n    const [title, setTitle] = React.useState(post.title);\r\n    const [content, setContent] = React.useState(post.content);\r\n\r\n    \r\n    const handleTitle = e => {\r\n        setTitle( e.target.value )\r\n    }\r\n\r\n    const handleContent = e => {\r\n        setContent( e.target.value )\r\n    }\r\n\r\n    const handleAddPost = () => {\r\n        const date = new Date().toLocaleString();\r\n\r\n        const updatePosts = posts.map(p => {\r\n            if (p.id === post.id){\r\n                p.title = title;\r\n                p.content = content;\r\n                p.date = date;\r\n            }\r\n            return p;\r\n        });\r\n        \r\n        localStorage.setItem('postsStorage', JSON.stringify([...updatePosts]));\r\n        setPost([...updatePosts]);\r\n        handleEditPost();\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.card}>\r\n            <TextField\r\n                autoFocus\r\n                fullWidth\r\n                label=\"Title\"\r\n                value={title}\r\n                onChange={handleTitle}\r\n            />\r\n            <TextField\r\n                label=\"Content\"\r\n                value={content}\r\n                onChange={handleContent}\r\n                fullWidth\r\n                multiline\r\n                rows={10}\r\n                rowsMax={10}\r\n            />\r\n            <IconButton color=\"primary\"  onClick={handleAddPost}>\r\n                <DoneIcon />\r\n            </IconButton>\r\n        </div>\r\n    );\r\n  }","import React, { useContext } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { Button } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport {PostsContext} from '../Main/Main';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport PostEditor from './PostEditor';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        marginTop: 10,\r\n        paddingLeft: '10%',\r\n        paddingRight: '10%',\r\n        backgroundColor: '#edeeff',         \r\n        wordWrap: 'break-word',\r\n        textAlign: 'justify',\r\n    },\r\n    button: {\r\n        left: '70%',\r\n        marginBottom: 10\r\n    },\r\n})\r\n\r\nexport const Post = ({post}) => {\r\n    const {setSelectedPost, isUserLoged} = useContext(PostsContext);\r\n    const classes = useStyles();\r\n    const [isEditPost, setIsEditPost] = React.useState(false);\r\n    const logedUser = isUserLoged();\r\n\r\n    const accessEdit = logedUser ? logedUser.id === post.authorId : false;\r\n\r\n    const handleLearnMore = () => {\r\n        setSelectedPost(post)\r\n    }\r\n\r\n    const handleEditPost = () => {\r\n        setIsEditPost(!isEditPost)\r\n    }\r\n\r\n   return (  \r\n        <Card className={classes.card}>\r\n            {\r\n                isEditPost \r\n                    ? (\r\n                        <PostEditor post={post} handleEditPost={handleEditPost}/>\r\n                    )\r\n                    : (\r\n                        <>\r\n                            <CardHeader \r\n                                title={post.title}\r\n                                subheader={`author: ${post.authorName}`}\r\n                            />\r\n                            <CardContent>\r\n                                {post.content}\r\n                                <br /> <br />\r\n                                {post.date}\r\n                            </CardContent>\r\n                            {window.location.href.includes('post')\r\n                                ? ( \r\n                                    accessEdit\r\n                                        ? (\r\n                                            <Button \r\n                                                className={classes.button} \r\n                                                color=\"primary\"\r\n                                                onClick={handleEditPost}\r\n                                            >  \r\n                                                <EditIcon />\r\n                                            </Button>\r\n                                        ) : null\r\n                                ) : (\r\n                                    <Button \r\n                                        className={classes.button} \r\n                                        color=\"primary\"\r\n                                        onClick={handleLearnMore}\r\n                                    >  \r\n                                        <Link to={`/post`} > Learn more </Link>\r\n                                    </Button>\r\n                                )\r\n                            }\r\n                        </>\r\n                    )\r\n            }\r\n        </Card>\r\n    )\r\n}","import React, { useContext } from 'react';\r\nimport {PostsContext} from '../Main/Main';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { Post } from '../Posts/Post';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    centered: {\r\n        width: '50%',\r\n        margin: 'auto',\r\n    },\r\n})\r\n\r\n\r\nexport default function Home() {\r\n    const {posts} = useContext(PostsContext);\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.centered}>\r\n            {\r\n                posts.reduceRight ( (reversePosts, post) => \r\n                    ([...reversePosts,\r\n                        <Post key={post.id} post={post} />\r\n                    ])\r\n                ,[])\r\n            }\r\n        </div>\r\n    )\r\n}","import React, { useContext } from 'react';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport {PostsContext} from '../Main/Main'\r\nimport getUniqueId from '../Main/getUniqueId'\r\nimport { IconButton } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        backgroundColor: '#edeeff',\r\n    }\r\n  }));\r\n\r\nexport default function CreatePost () {\r\n    const classes = useStyles();\r\n    const {posts, setPost, isUserLoged} = useContext(PostsContext);\r\n    const loggedUser = isUserLoged();\r\n\r\n\r\n    const [title, setTitle] = React.useState('');\r\n    const [content, setContent] = React.useState('');\r\n\r\n    \r\n    const handleTitle = e => {\r\n        setTitle( e.target.value )\r\n    }\r\n\r\n    const handleContent = e => {\r\n        setContent( e.target.value )\r\n    }\r\n\r\n    const handleAddPost = () => {\r\n        const id = getUniqueId(posts) + 1;\r\n        const authorId = loggedUser.id;\r\n        const authorName = loggedUser.name;\r\n        const date = new Date().toLocaleString();\r\n\r\n        const updatePosts = [ ...posts, {id, title, content, authorId, authorName, date} ];\r\n        localStorage.setItem('postsStorage', JSON.stringify([...updatePosts]));\r\n        setPost([...updatePosts]);\r\n    }\r\n\r\n    if (!loggedUser) {\r\n        return <Redirect to=\"/blog-app\" />;\r\n    }\r\n\r\n    return (\r\n      <Grid container justify=\"center\">\r\n        <Grid item sm={9}>\r\n          <Paper className={classes.paper}>\r\n            <Typography align=\"center\">\r\n                Tell us your story!\r\n            </Typography>\r\n            <Grid container>\r\n              <Grid item sm={9}>\r\n                <TextField\r\n                    autoFocus\r\n                    fullWidth\r\n                    label=\"Title\"\r\n                    value={title}\r\n                    onChange={handleTitle}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <TextField\r\n                label=\"Content\"\r\n                value={content}\r\n                onChange={handleContent}\r\n                fullWidth\r\n                multiline\r\n                rows={10}\r\n                rowsMax={10}\r\n            />\r\n            <Grid container direction=\"row-reverse\">\r\n              <Link to=\"/blog-app\" >\r\n                <IconButton color=\"primary\"  onClick={handleAddPost}>\r\n                  <DoneIcon />\r\n                </IconButton>\r\n              </Link>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }","import React, { useContext } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport {PostsContext} from '../Main/Main'\r\nimport getUniqueId from '../Main/getUniqueId'\r\nimport { IconButton } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    textField: {\r\n        marginTop: 20,\r\n    }\r\n  }));\r\n\r\nexport default function CreateComents ({post}) {\r\n    const classes = useStyles();\r\n    const {coments, setComents, isUserLoged} = useContext(PostsContext);\r\n    const loggedUser = isUserLoged();\r\n\r\n    const [coment, setComent] = React.useState('');\r\n    \r\n    const handleComent = e => {\r\n        setComent( e.target.value )\r\n    }\r\n\r\n    const handleAddComent = () => {\r\n        const id = getUniqueId(coments) + 1;\r\n        const postId = post.id;\r\n        const authorId = loggedUser.id;\r\n        const authorName = loggedUser.name;\r\n        const date = new Date().toLocaleString();\r\n\r\n        const updateComents = [ ...coments, {id, coment, postId, authorId, authorName, date} ];\r\n        localStorage.setItem('comentsStorage', JSON.stringify([...updateComents]));\r\n        setComents([...updateComents]);\r\n        setComent('');\r\n    }\r\n\r\n    return (\r\n      <Grid container justify=\"center\">\r\n        <Grid item sm={9}>\r\n                <TextField \r\n                    className={classes.textField}\r\n                    label=\"Coment\"\r\n                    value={coment}\r\n                    onChange={handleComent}\r\n                    fullWidth\r\n                    multiline\r\n                    rows={2}\r\n                    rowsMax={4}\r\n                />\r\n                <Grid container direction=\"row-reverse\">\r\n                    <IconButton color=\"primary\"  onClick={handleAddComent}>\r\n                        <DoneIcon />\r\n                    </IconButton>\r\n                </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n}","import React, { useContext } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport {PostsContext} from '../Main/Main'\r\nimport { IconButton } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    textField: {\r\n        marginTop: 20,\r\n    }\r\n  }));\r\n\r\nexport default function ComentEditor ({thisComent, handleEditComent}) {\r\n    const classes = useStyles();\r\n    const {coments, setComents} = useContext(PostsContext);\r\n\r\n    const [coment, setComent] = React.useState(thisComent.coment);\r\n    \r\n    const handleComent = e => {\r\n        setComent( e.target.value )\r\n    }\r\n\r\n    const handleAddComent = () => {\r\n        const date = new Date().toLocaleString();\r\n\r\n        const updateComents = coments.map(c => {\r\n            if (c.id === thisComent.id){\r\n                c.coment = coment;\r\n                c.date = date;\r\n            }\r\n            return c;\r\n        })\r\n\r\n        localStorage.setItem('comentsStorage', JSON.stringify([...updateComents]));\r\n        setComents([...updateComents]);\r\n        handleEditComent();\r\n    }\r\n\r\n    return (\r\n      <Grid container justify=\"center\">\r\n        <Grid item sm={9}>\r\n                <TextField \r\n                    className={classes.textField}\r\n                    label=\"Coment\"\r\n                    value={coment}\r\n                    onChange={handleComent}\r\n                    fullWidth\r\n                    multiline\r\n                    rows={2}\r\n                    rowsMax={4}\r\n                />\r\n                <Grid container direction=\"row-reverse\">\r\n                    <IconButton color=\"primary\"  onClick={handleAddComent}>\r\n                        <DoneIcon />\r\n                    </IconButton>\r\n                </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n}","import React, { useContext } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport ComentEditor from './ComentEditor';\r\nimport {PostsContext} from '../Main/Main';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { Button } from '@material-ui/core';\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        marginTop: 10,\r\n        paddingLeft: '10%',\r\n        paddingRight: '10%',\r\n        backgroundColor: '#edeeff',         \r\n        wordWrap: 'break-word',\r\n        textAlign: 'justify',\r\n    },\r\n    cardContent: {\r\n        paddingTop: 0,\r\n        fontSize: 18,\r\n    }\r\n})\r\n\r\nexport const Coment = ({coment}) => {\r\n    const classes = useStyles();\r\n    const [isEditComent, setIsEditComent] = React.useState(false);\r\n    const {isUserLoged} = useContext(PostsContext);\r\n    const logedUser = isUserLoged();\r\n\r\n    const accessEdit = logedUser ? logedUser.id === coment.authorId : false;\r\n\r\n    const handleEditComent = () => {\r\n        setIsEditComent(!isEditComent)\r\n    }\r\n\r\n   return ( \r\n       <Card className={classes.card}> \r\n            {        \r\n            isEditComent\r\n                ? <ComentEditor \r\n                    handleEditComent={handleEditComent}\r\n                    thisComent={coment}\r\n                />\r\n                : (  \r\n                    <>         \r\n                        <CardHeader \r\n                            title={coment.authorName}\r\n                            subheader={coment.date}\r\n                        />\r\n                        <CardContent className={classes.cardContent} >\r\n                            {coment.coment}               \r\n                        </CardContent>\r\n                        {                                    \r\n                            accessEdit\r\n                                ? (\r\n                                    <Button \r\n                                        className={classes.button} \r\n                                        color=\"primary\"\r\n                                        onClick={handleEditComent}\r\n                                    >  \r\n                                        <EditIcon />\r\n                                    </Button>\r\n                                ) : null}\r\n                    </>\r\n                )\r\n            }\r\n        \r\n\r\n        </Card>\r\n    )\r\n}","import React, { useContext } from 'react';\r\nimport {PostsContext} from '../Main/Main';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { Coment } from './Coment';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    centered: {\r\n        margin: 'auto',\r\n    },\r\n})\r\n\r\n\r\nexport default function ComentsPost({post}) {\r\n    const {coments} = useContext(PostsContext);\r\n    const classes = useStyles();\r\n    const comentsPost = coments.filter(coment => coment.postId === post.id )\r\n    return (\r\n        <div className={classes.centered}>\r\n            {\r\n                comentsPost.reduceRight ( (reverseComents, coment) => \r\n                    ([...reverseComents,\r\n                        <Coment key={coment.id} coment={coment} />\r\n                    ])\r\n                ,[])\r\n            }\r\n        </div>\r\n    )\r\n}","import React, { useContext } from 'react';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { Link } from 'react-router-dom';\r\nimport {PostsContext} from '../Main/Main';\r\nimport { Post } from './Post';\r\nimport { makeStyles, Button } from '@material-ui/core';\r\nimport CreateComents from '../Coments/CreateComent';\r\nimport ComentsPost from '../Coments/ComentsPost';\r\n\r\nconst useStyles = makeStyles({\r\n    centered: {\r\n        width: '70%',\r\n        margin: 'auto',\r\n    },\r\n    link: {\r\n        textDecoration: 'none',\r\n        margin: 'auto'\r\n    },\r\n})\r\n\r\nexport function PostPage() {\r\n    const {selectedPost, isUserLoged} = useContext(PostsContext);\r\n    const classes = useStyles();\r\n\r\n    const loggedUser = isUserLoged();\r\n\r\n    if (!loggedUser) {\r\n        return( \r\n            <Dialog open={true} aria-labelledby=\"simple-dialog-title\" >\r\n                <DialogTitle id=\"simple-dialog-title\">Please log in to your account</DialogTitle>\r\n                <Link to='/blog-app' className={classes.link}> \r\n                    <Button > ok </Button> \r\n                </Link>\r\n            </Dialog>\r\n        )\r\n    }\r\n\r\n    return ( \r\n        <div className={classes.centered}>\r\n            <Post post={selectedPost} loggedUser={loggedUser} />\r\n            <CreateComents post={selectedPost} />\r\n            <ComentsPost post={selectedPost} />\r\n        </div>\r\n    )\r\n}","import React, { createContext, useState, useEffect } from 'react';\r\nimport Navigation from '../Navigation/Navigation'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport Home from '../Home/Home';\r\nimport CreatePost from '../Posts/CreatePost';\r\nimport { PostPage } from '../Posts/PostPage';\r\n\r\nexport const UsersContext = createContext();\r\nexport const PostsContext = createContext();\r\n\r\nexport default function Main () {\r\n    const [users, setUser] = useState([]);\r\n    const [posts, setPost] = useState([]);\r\n    const [selectedPost, setSelectedPost] = useState({});\r\n    const [coments, setComents] = useState([]);\r\n\r\n    const isUserLoged = () => {\r\n        const user = users.find(user => user.isLogged === true);\r\n        return user;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const usersStorage = JSON.parse( localStorage.getItem('usersStorage') );\r\n        const postsStorage = JSON.parse( localStorage.getItem('postsStorage') );\r\n        const comentsStorage = JSON.parse( localStorage.getItem('comentsStorage') );\r\n\r\n        usersStorage \r\n            ? setUser([...usersStorage])\r\n            : setUser([{id: 1, name: 'admin', password: 'admin', isLogged: false}]);\r\n        \r\n        postsStorage\r\n            ? setPost([...postsStorage])\r\n            : setPost([{id: 1, title: 'my post', \r\n                        content: `Lorem Ipsum is simply dummy text of the printing and typesetting industry.\r\n                                    Lorem Ipsum has been the industry's standard dummy text ever since the \r\n                                    1500s, when an unknown printer took a galley of type and scrambled it \r\n                                    to make a type specimen book. It has survived not only five centuries,\r\n                                    but also the leap into electronic typesetting, remaining essentially\r\n                                    unchanged. It was popularised in the 1960s with the release of Letraset\r\n                                    sheets containing Lorem Ipsum passages, and more recently with desktop \r\n                                    publishing software like Aldus PageMaker including versions of Lorem Ipsum.`,\r\n                        authorId: 1, authorName: 'admin', date: \"22.02.2020, 01:57:16\"}]);\r\n                    \r\n        comentsStorage\r\n            ? setComents([...comentsStorage])\r\n            : setComents([{id: 1, coment: 'my first coment', postId: 1, authorId: 1,\r\n                            authorName: 'admin', date: \"22.02.2020, 02:16:44\"}])\r\n    },[])\r\n\r\n    return (\r\n        <>\r\n            <UsersContext.Provider \r\n                value={{users, setUser, isUserLoged}}\r\n            >\r\n                <Navigation/>\r\n            </UsersContext.Provider>\r\n            \r\n            <PostsContext.Provider \r\n                value={{ posts, setPost, coments, setComents,\r\n                        isUserLoged, selectedPost, setSelectedPost}}\r\n            >\r\n                <Switch>\r\n                    <Route exact path=\"/blog-app\">\r\n                        <Home />\r\n                    </Route>\r\n                    <Route path=\"/create\">\r\n                        <CreatePost />\r\n                    </Route>\r\n                    <Route path='/post'>\r\n                        <PostPage />\r\n                    </Route>\r\n                </Switch>\r\n            </PostsContext.Provider>\r\n        </>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport {BrowserRouter} from 'react-router-dom';\nimport Main from './components/Main/Main'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Main />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}